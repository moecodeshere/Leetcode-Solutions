Leetcode 

So we have phases planned 
Phase 1-2: 220 problems (Array + String fundamentals)
Phase 3: 100 problems (LinkedList + Stack/Queue)
Phase 4: 100 problems (HashMap + Binary Search)
Phase 5: 100 problems (Heap + Tree basics)
Phase 6: 80 problems (BST + Graph algorithms)

PHASE 1
Phase 1: Array Patterns (1-120)
A. Array Basics - Pure Easy (1-20)
B. Two Pointers - Gradual Complexity (21-40)
C. Sliding Window - Step by Step (41-70)
D. Prefix Sum & Array Math (71-95)
E. Advanced Array Techniques (96-120)
Phase 2: String Patterns (121-220)
A. String Fundamentals (121-145)
B. Pattern Matching - Easy to Medium (146-170)
C. Advanced String Algorithms (171-195)
D. String DP & Complex Patterns (196-220)
Phase 3: LinkedList Patterns (221-320)
A. LinkedList Fundamentals (221-245)
B. Advanced LinkedList Operations (246-270)
C. Stack Fundamentals (271-295)
D. Queue & Deque Patterns (296-320)
Phase 4: HashMap & Binary Search (321-420)
A. HashMap Fundamentals (321-350)
B. Advanced HashMap Patterns (351-375)
C. Binary Search Fundamentals (376-400)
D. Advanced Binary Search (401-420)
Phase 5: Heap & Tree Fundamentals (421-520)
A. Heap Operations (421-450)
B. Tree Traversals (451-475)
C. Tree Properties & Validation (476-500)
D. Path & Sum Problems (501-520)
Phase 6: BST & Graph Algorithms (521-600)
A. Binary Search Tree Operations (521-545)
B. Graph Traversal & Basic Algorithms (546-570)
C. Advanced Graph Algorithms (571-590)
D. Final Integration & Complex Problems (591-600)















A. Array Basics - Pure Easy (1-20)
1. Running Sum of 1d Array — 1480 (Basic iteration)
2. Find Numbers with Even Number of Digits — 1295 (Digit counting)
3. Max Consecutive Ones — 485 (Simple counting)
4. Squares of a Sorted Array — 977 (Two pointers intro)
5. Duplicate Zeros — 1089 (Array modification)
6. Merge Sorted Array — 88 (Two array merging)
7. Remove Element — 27 (In-place removal)
8. Remove Duplicates from Sorted Array — 26 (Two pointers)
9. Check If N and Its Double Exist — 1346 (HashSet usage)
10. Valid Mountain Array — 941 (Single pass validation) 
11. Replace Elements with Greatest Element on Right Side — 1299 (Right-to-left)
12. Move Zeroes — 283 (Two pointers with zeros)
13. Sort Array By Parity — 905 (Partitioning)
14. Sort Array By Parity II — 922 (Even/odd positioning)
15. Height Checker — 1051 (Comparison with sorted)
16. Third Maximum Number — 414 (Set for top elements)
17. Find All Numbers Disappeared in an Array — 448 (Array as hash)
18. Single Number — 136 (XOR properties) 
19. Majority Element — 169 (Boyer-Moore or counting)
20. Contains Duplicate — 217 (HashSet detection)


Question1. Running Sum of 1d Array — 1480 (Basic iteration)
Question2. Find Numbers with Even Number of Digits — 1295 (Digit counting)
SOLUTION) There could be many ways to do it 
1)String Conversion
String.valueOf(int i) actually calls Integer.toString(i) behind the scenes
int count=0;
       for(int i=0; i<nums.length;i++){
           if(String.valueOf(nums[i]).length()%2==0){
               count++;
2) Counting Digits
By counting digits until the quotient of that number is not equal to zero            sigle digit/10 ==0

3)Using Math (log)
Number of digits = floor(log₁₀(number)) + 1       just think int terms of log basics

int digits= (int)(Math.log10(nums[i]))+1;

4)Question specific constraints trick
5)Bit manipulation
THESE BOTH WILL BE COVERED LATER
Question3. Max Consecutive Ones — 485 (Simple counting)

We simply iterate and check if element is zero then the streak ends and we update streak using Math.max

Question4. Squares of a Sorted Array — 977 (Two pointers intro)
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
So the problem here is the negative integers everything is already sorted so the TRICK  here is after squaring we need TWO pointers 
     

[-7,-3,2,3,11]  this becomes [49, 9, 4, 9 , 121]  so between there somewhere there is a point around which everything is already sorted something like [49, 9,(that point) 4, 9 , 121]
 So we use two pointers a start and an end pointer and sort the array by shifting them 

Question5. Duplicate Zeros — 1089 (Array modification)
Question6. Merge Sorted Array — 88 (Two array merging)
Question7. Remove Element — 27 (In-place removal)
Question8. Remove Duplicates from Sorted Array — 26 (Two pointers)
Question9. Check If N and Its Double Exist — 1346 (HashSet usage)

